// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/whatthefar/monorepo-toolkit/pkg/pipeline (interfaces: GitHubActionEnv)

// Package mock_pipeline is a generated GoMock package.
package mock_pipeline

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGitHubActionEnv is a mock of GitHubActionEnv interface
type MockGitHubActionEnv struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubActionEnvMockRecorder
}

// MockGitHubActionEnvMockRecorder is the mock recorder for MockGitHubActionEnv
type MockGitHubActionEnvMockRecorder struct {
	mock *MockGitHubActionEnv
}

// NewMockGitHubActionEnv creates a new mock instance
func NewMockGitHubActionEnv(ctrl *gomock.Controller) *MockGitHubActionEnv {
	mock := &MockGitHubActionEnv{ctrl: ctrl}
	mock.recorder = &MockGitHubActionEnvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitHubActionEnv) EXPECT() *MockGitHubActionEnvMockRecorder {
	return m.recorder
}

// Branch mocks base method
func (m *MockGitHubActionEnv) Branch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Branch")
	ret0, _ := ret[0].(string)
	return ret0
}

// Branch indicates an expected call of Branch
func (mr *MockGitHubActionEnvMockRecorder) Branch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Branch", reflect.TypeOf((*MockGitHubActionEnv)(nil).Branch))
}

// EventType mocks base method
func (m *MockGitHubActionEnv) EventType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventType")
	ret0, _ := ret[0].(string)
	return ret0
}

// EventType indicates an expected call of EventType
func (mr *MockGitHubActionEnvMockRecorder) EventType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventType", reflect.TypeOf((*MockGitHubActionEnv)(nil).EventType))
}

// Owner mocks base method
func (m *MockGitHubActionEnv) Owner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Owner")
	ret0, _ := ret[0].(string)
	return ret0
}

// Owner indicates an expected call of Owner
func (mr *MockGitHubActionEnvMockRecorder) Owner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owner", reflect.TypeOf((*MockGitHubActionEnv)(nil).Owner))
}

// Ref mocks base method
func (m *MockGitHubActionEnv) Ref() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ref")
	ret0, _ := ret[0].(string)
	return ret0
}

// Ref indicates an expected call of Ref
func (mr *MockGitHubActionEnvMockRecorder) Ref() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ref", reflect.TypeOf((*MockGitHubActionEnv)(nil).Ref))
}

// Repository mocks base method
func (m *MockGitHubActionEnv) Repository() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repository")
	ret0, _ := ret[0].(string)
	return ret0
}

// Repository indicates an expected call of Repository
func (mr *MockGitHubActionEnvMockRecorder) Repository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repository", reflect.TypeOf((*MockGitHubActionEnv)(nil).Repository))
}

// Sha mocks base method
func (m *MockGitHubActionEnv) Sha() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sha")
	ret0, _ := ret[0].(string)
	return ret0
}

// Sha indicates an expected call of Sha
func (mr *MockGitHubActionEnvMockRecorder) Sha() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sha", reflect.TypeOf((*MockGitHubActionEnv)(nil).Sha))
}

// Token mocks base method
func (m *MockGitHubActionEnv) Token() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(string)
	return ret0
}

// Token indicates an expected call of Token
func (mr *MockGitHubActionEnvMockRecorder) Token() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockGitHubActionEnv)(nil).Token))
}
