// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/whatthefar/monorepo-toolkit/pkg/usecase (interfaces: ListChangesUseCase)

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockListChangesUseCase is a mock of ListChangesUseCase interface
type MockListChangesUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockListChangesUseCaseMockRecorder
}

// MockListChangesUseCaseMockRecorder is the mock recorder for MockListChangesUseCase
type MockListChangesUseCaseMockRecorder struct {
	mock *MockListChangesUseCase
}

// NewMockListChangesUseCase creates a new mock instance
func NewMockListChangesUseCase(ctrl *gomock.Controller) *MockListChangesUseCase {
	mock := &MockListChangesUseCase{ctrl: ctrl}
	mock.recorder = &MockListChangesUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockListChangesUseCase) EXPECT() *MockListChangesUseCaseMockRecorder {
	return m.recorder
}

// ListChanges mocks base method
func (m *MockListChangesUseCase) ListChanges(arg0 context.Context, arg1 []string, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChanges", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChanges indicates an expected call of ListChanges
func (mr *MockListChangesUseCaseMockRecorder) ListChanges(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChanges", reflect.TypeOf((*MockListChangesUseCase)(nil).ListChanges), arg0, arg1, arg2)
}
