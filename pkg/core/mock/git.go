// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/whatthefar/monorepo-toolkit/pkg/core (interfaces: GitGateway)

// Package mock_core is a generated GoMock package.
package mock_core

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/whatthefar/monorepo-toolkit/pkg/core"
	reflect "reflect"
)

// MockGitGateway is a mock of GitGateway interface
type MockGitGateway struct {
	ctrl     *gomock.Controller
	recorder *MockGitGatewayMockRecorder
}

// MockGitGatewayMockRecorder is the mock recorder for MockGitGateway
type MockGitGatewayMockRecorder struct {
	mock *MockGitGateway
}

// NewMockGitGateway creates a new mock instance
func NewMockGitGateway(ctrl *gomock.Controller) *MockGitGateway {
	mock := &MockGitGateway{ctrl: ctrl}
	mock.recorder = &MockGitGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitGateway) EXPECT() *MockGitGatewayMockRecorder {
	return m.recorder
}

// DiffNameOnly mocks base method
func (m *MockGitGateway) DiffNameOnly(arg0, arg1 core.Hash) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiffNameOnly", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiffNameOnly indicates an expected call of DiffNameOnly
func (mr *MockGitGatewayMockRecorder) DiffNameOnly(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiffNameOnly", reflect.TypeOf((*MockGitGateway)(nil).DiffNameOnly), arg0, arg1)
}
